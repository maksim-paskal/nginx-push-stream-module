worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format json escape=json '{"request_id": "$request_id","http_x_request_id": "$http_x_request_id","proxy_protocol_addr": "$proxy_protocol_addr",'
  '"remote_addr": "$remote_addr", "proxy_add_x_forwarded_for": "$proxy_add_x_forwarded_for",'
  '"remote_user": "$remote_user", "host": "$host","time_local": "$time_local", "request" : "$request", "status": "$status", "body_bytes_sent": "$body_bytes_sent",'
  '"http_referer":  "$http_referer", "http_user_agent": "$http_user_agent", "request_length" : "$request_length", "request_time" : "$request_time",'
  '"upstream_addr": "$upstream_addr",  "upstream_response_length": "$upstream_response_length",'
  '"upstream_response_time": "$upstream_response_time", "upstream_status": "$upstream_status"}';

  access_log  /var/log/nginx/access.log  json;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;

  push_stream_message_ttl    1m;
  push_stream_max_messages_stored_per_channel    100;
  push_stream_subscriber_connection_ttl    1m;
  push_stream_shared_memory_size	1024m;

  server {
    listen              8080 reuseport backlog=511;

    server_tokens off;
    client_max_body_size 8M;
    charset utf-8;

    location /channels-stats {
      push_stream_channels_path	$arg_cid;
      push_stream_channels_statistics;
    }

    location /publish {
      push_stream_publisher;
      push_stream_channels_path	$arg_cid;
      push_stream_store_messages	on;
    }

    location ~ /comet/(.*) {
      gzip  off;
      push_stream_subscriber  long-polling;
      push_stream_channels_path	$1;
      #push_subscriber_concurrency    broadcast;
      push_stream_message_template  "{\"ids\":{\"~channel~\":~id~},\"data\":~text~},";
      default_type  text/plain;
    }

    location ~ /chat/subscribe/(.*) {
      gzip  off;
      push_stream_subscriber  long-polling;
      push_stream_channels_path	$1;
      #push_subscriber_concurrency    broadcast;
      push_stream_message_template  "{\"ids\":{\"~channel~\":~id~},\"data\":~text~},";
      default_type  text/plain;
    }
  }
}
